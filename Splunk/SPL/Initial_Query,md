After running this query, the results were saved to a file named Denton_AD_Final_Set.csv as a lookup file.  As you review the Splunk queries, all SPL starting with | inputlookup Denton_AD_Final_Set.csv is understood to come from this below query.

###Cleanup: The SPL (Search Processing Language) below manipulates the raw, .csv data into meaningful fields with fieldnames more easily understood by the audience.  
###Timestamps: The SPL creates additional fields to categorize timestamps and determine whether the age of the timestamps warrants remediation.
###Regex: Fields containing hectic values are maniuplated in the 'rex' command and uneccesary characters are removed
###Evals: Used to calculate the Risk Score of each account

| inputlookup Denton_AD_users.csv
```^^^semi-cleaned raw user data saved in the Splunk UI as a .csv file```

```Evaluation of PasswordLastSet to Current Date - ncessary to see the age of the password```
| eval epochDate1=strptime(PasswordLastSet, "%m/%d/%Y %H:%M")
| eval cDate=now()
| eval cFormat=strftime(cDate,"%m/%d/%Y %H:%M")
| eval PwdLastSet_DaysDiff = round((cDate - epochDate1)/86400)

```Eval for Expired Password - simple eval to categorize whether a pwd is expired in a yes/no category```
| eval pwdStatus = if(PwdLastSet_DaysDiff > 90, "Expired", "Valid")

```Eval for Dormant Users - if the user has not logged on since 30 days from the current date the account is considered Dormant or 'not in use'```
| eval logonStatus = if(LastLogon_DaysDiff > 90, "Dormant", "Valid")

```Evaluation of LastLogonDate to Current Date - necessary to see how long it has been since the user last logged in```
| eval epochDate2=strptime(LastLogonDate, "%m/%d/%Y %H:%M")
| eval cDate=now()
| eval cFormat=strftime(cDate,"%m/%d/%Y %H:%M")
| eval LastLogon_DaysDiff = round((cDate - epochDate2)/86400)

```Regex to clean timestamp values - necessary to change the format of the time, this helps makes the timestamp look 'prettier'```
| rex field=LastLogonDate "(?<LastLogonDate>\d{1,2}\/\d{1,2}\/\d{4}) \d{1,2}:\d{2}"
| rex field=PasswordLastSet "(?<PasswordLastSet>\d{1,2}\/\d{1,2}\/\d{4}) \d{1,2}:\d{2}"

```Regex to clean the user's Manager - necessary because the 'Manager' value is published as the Manager's identity displaying as a dN (distinguishedName), this clarifies who the user's manager is more legibly```
| rex field=Manager max_match=0 "RP=(?<Manager>[^,$]*[,]*[^,$]*")
| rex field=Manager mode=sed "s/\\\\//g"

```Regex to clean the user's DN (DistinguishedName) - necessary in understanding where in Denton's Active Directory instance accounts are located, also helps define a user's operating purpose, use-case```
| rex field=CanonicalName "\/(?<CanonicalName>[^\/]+)\/"

```Evals to calculate RS (Risk Score)```
| eval RS_Enabled = if(Enabled=TRUE, "2","1")
| eval RS_Privleged = if(adminCount=1, "5","1")
| eval RS_Email = if(EmailAddress like "%denton%", "2","1")
| eval RS_Logon_Status = if(logonStatus="Dormant", "2", "1")
| eval RS_Pwd_Status = if(pwdStatus="Expired", "2", "1")
| eval RS_Enterprise_Admin=if(MemberOf like "%Enterprise Marita%", "1" , "0")
| eval RS_Domain_Admin=if(MemberOf like "%Domain Marita%", "1" , "0")
| eval Risk_Score = RS_Enabled + RS_Privleged + RS_Email + RS_Logon_Status + RS_Pwd_Status + RS_Enterprise_Admin + RS_Domain_Admin

```Regex to clean MemberOf (Groups) - necessary in cleaning up the Microsoft verbiage and group dN (distinguishedName) so all that remains is the name of the group tied to the user's account```
| rex field=MemberOf max_match=0 "RP=(?<MemberOf>[^,$]*[,]*[^,$]*")
| rex field=MemberOf mode=sed "s/,(RP|ZW)=[^,$]*//g"

| table
ObjectClass 
userAccountControl
SamAccountName
DisplayName
Title
physicalDeliveryOfficeName
Department
Description
Company
Risk_Score
Enabled
RS_Enabled
EmailAddress
RS_Email
adminCount
RS_Privleged
logonCount
LastLogonDate
LastLogon_DaysDiff
logonStatus
RS_Logon_Status
PasswordLastSet
PwdLastSet_DaysDiff
pwdStatus
RS_Pwd_Status
PasswordNeverExpires
PasswordNotRequired
CannotChangePassword
RS_Enterprise_Admin
RS_Domain_Admin
MemberOf
DistinguishedName
isCriticalSystemObject
LockedOut
primaryGroupID

```Field names renamed```
| rename
adminCount as "Privileged",
CN as CommonName,
CanonicalName as OU
physicalDeliveryOfficeName as Office,
SamAccountName as identity,
userAccountControl as Status

```Value text swaps pertaining to userAccountControl```
| replace 
"16843264" with "Enabled, PwdNeverExpire, Trusted for Delegation"
"2080" with "Disabled"
"512" with "Enabled"
"514" with "Disabled"
"546" with "Enabled, PwdNotRequired"
"590336" with "Enabled, PwdNeverExpire, Trusted for Delegation"
"66048" with "Enabled, LockedOut"
"66050" with "Disbled, LockedOut"
